---
title: Exercises
subtitle: ISEG PGAAIML 2025
author: Diogo Silva
format:
  html:
    embed-resources: true
  pdf: default
---


# Lesson 1

## Exercise 1

- You are an analyst working for a large investment corporation.
- Your task is to analyze the evolution of investments over time and provide insights to clients.
- For this exercise, you will receive the amount of initial investment value and the annual return rate from the client and calculate the investment value for each year, over a period of 3 years.
- You will also determine if the investment has increased or decreased compared to the previous year, for each year.


## Exercise 2

- An election is coming up, and your clients are concerned about the potential impact of different political parties on their investments.
- You need to factor in the influence of political parties on the investment returns.
- The client will provide you with the initial investment value.
- Your colleague, the forecaster, has provided you with the base annual return rate.
- You have also partnered with a political analyst who has provided you with:
  - the impact factors of different political parties on the annual return rate - this value should be summed to the base annual return rate.
  - a prediction of which party will be in power in each year;
- Your task is to calculate the investment value for each year, considering the influence of political parties, and determine if the investment has increased or decreased compared to the previous year, for each year.



# Lesson 2

## Exercise 3

- Redo exercise [Exercise 1](#exercise-1) with lists.
- Now, the user chooses the initial investment value and the number of years to simulate (use `input`).
- The annual return rate may be set by you or received by the user.
- The user should be able to see the evolution of the investment over the years and if it increased or decreased compared to the previous year.
- Show a formated table with the results, first column if the year, second column is the value in that year.

## Exercise 4

- Redo [exercise 2](#exercise-2) with lists, as in [exercise 3](#exercise-3).
- A country will have elections. There are K parties relevant parties (which you hardcode in, for example, a list).
- The winning party will govern for 8 years.
- The party's policies will influence the annual return rate (ARR) over some type of investments.
- A forecaster has provided you with a base ARR (configure this in the code).
- A political analyst has provided you with how each party might influence the ARR (configure this in code)..
- The ARR for each party is the base ARR plus the influence of the party.
- For each party, do a simulation for the volution of an investment of `M`â‚¬ over 8 years (`M` is received from the user).
- Print the final investment for each party, along with the full evolution of the party with the highest investment.
- Tips
  - The value in each year (including the initial value) must be stored.
      - How will you store this data? A list for each party? A list for each year? Somethine else?
  - You need to iterate over the years for each party, or vice versa. That's a loop inside a loop.
  - You need to keep track of the investment for each party.


## Exercise 5

- Based on [exercise 4](#exercise-4), add the following features.
- Each party may also make the ARR more or less volatile (unstable).
- The volatility is given by a list of 8 floats (one for each party).
- The volatility is the standard deviation of the ROI.
- For each year, each party's final ARR is a random number with a normal distribution with the mean given by the party's ARR of the previous year and the standard deviation given by the volatility.
- Recompute investment for each party.
- Tips
  - You can generate random numbers with a normal distribution with the [`numpy` library](https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html).

  ```python
  import numpy as np
  mean = 0
  std = 1
  np.random.normal(mean, std) # random number with mean 0 and std 1
  np.random.normal(mean, std, 10)  # list of 10 random numbers with mean 0 and std 1
  ```

## Exercise 6

- Based on [exercise 5](#exercise-5), add the following features.
- Because we're dealing with random events, let's do a Monte Carlo simulation.
- Simulate the evolution of the investment 1000 times for each party.
- Print the average investment and its standard deviation for the parties with the highest final average and the one with lowest standard deviation.
- For the party with the highest average, include also the 25%, 50% and 75% percentiles.
- Tips
  - Compute [mean](https://numpy.org/doc/stable/reference/generated/numpy.mean.html) and [standard deviation](https://numpy.org/doc/stable/reference/generated/numpy.std.html) with `numpy`.

  ```python
  import numpy as np
  l = [1,2,3,4,5]
  np.mean(l)  # -> mean
  np.std(l)  # -> standard deviation
  ```

  - Compute [percentiles]((https://numpy.org/doc/stable/reference/generated/numpy.percentile.html)) with `numpy`.

  ```python
  import numpy as np
  l = [1,2,3,4,5]
  np.percentile(l, 25)  # -> 25% percentile
  ```